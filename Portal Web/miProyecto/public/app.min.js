!function(o,s,e){console.log("init");var n={init:function(e){n.select2(),n.carousel(),n.stellar(),n.dateTimePicker(),n.sideNav()},select2:function(){o(e).ready(function(){o("#selectPerson").select2({placeholder:"Person",allowClear:!0})})},carousel:function(){o(".hero-carousel").owlCarousel({loop:!0,margin:10,nav:!0,dots:!1,responsive:{0:{items:1},600:{items:1}},nav:!0,navText:['<span class="lnr lnr-chevron-left"></span>','<span class="lnr lnr-chevron-right"></span>']}),o(".testi-carousel").owlCarousel({loop:!0,margin:10,autoplay:!0,nav:!1,dots:!0,dotSpeed:1e3,autoplay:!0,autoplaySpeed:1e3,items:1})},stellar:function(){var e=o(s).width();767<=e&&(o(".bg-fixed").attr("data-stellar-background-ratio","0.8"),o.stellar({horizontalScrolling:!1,responsive:!0,parallaxBackgrounds:!0,scrollProperty:"scroll"}))},dateTimePicker:function(){o("#datetimepicker4").datetimepicker({format:"L"}),o("#datetimepicker3").datetimepicker({format:"LT"})},sideNav:function(){o("#side-nav-open").click(function(){o("#side-nav").css("width","300"),setTimeout(function(){o("body").addClass("sidenav-open")},200),setTimeout(function(){o("body").addClass("in")},400)}),o("#side-nav-close, #canvas-overlay").click(function(){setTimeout(function(){o("body").removeClass("in")},200),setTimeout(function(){o("body").removeClass("sidenav-open"),o("#side-nav").css("width","0")},400)}),o("#side-search-open").click(function(){o("#side-search").css("width","300"),setTimeout(function(){o("body").addClass("sidesearch-open")},200),setTimeout(function(){o("body").addClass("in")},300)}),o("#side-search-close, #canvas-overlay").click(function(){setTimeout(function(){o("body").removeClass("in")},200),setTimeout(function(){o("body").removeClass("sidesearch-open"),o("#side-search").css("width","0")},300)})}};o(e).ready(function(){n.init(o)})}(window.jQuery,window,document);

document.getElementById('obtenerDatosButton').addEventListener('click', async () => {    try {
    const response = await fetch('/obtener-datos');
    if (response.ok) {
        const data = await response.json();
        const resultadoDiv = document.getElementById('resultado');
        resultadoDiv.innerHTML = JSON.stringify(data, null, 2);
    } else {
        console.error('Error en la solicitud.');
    }
} catch (err) {
    console.error(err);
}
}); 

// Horas Disponibles
function verificarDisponibilidad(fecha) {
    fetch(`/verificar-disponibilidad?fecha=${fecha}`)
        .then(response => response.json())
        .then(horasDisponibles => {
            console.log('Horas disponibles:', horasDisponibles); 
            actualizarSelectHoras(horasDisponibles);
        })
        .catch(error => {
            console.error('Error al verificar la disponibilidad:', error);
        });
}

// DatePicker Horas
//document.addEventListener('DOMContentLoaded', function() {
//    var datepicker = document.getElementById('datepicker');
//    datepicker.addEventListener('change', function() {
//        verificarDisponibilidad(this.value);
//    });
//});

// Fusion DOM CONTENT
document.addEventListener('DOMContentLoaded', function() {
    obtenerCapacidadesMesas(); // Llama a esta función al cargar la página

    var datepicker = document.getElementById('datepicker');
    datepicker.addEventListener('change', function() {
        verificarDisponibilidad(this.value);
    });

    var selectCapacity = document.getElementById('selectCapacity');
    selectCapacity.addEventListener('change', function() {
        verificarCapacidadMesas(this.value);
    });

// REALIZAR RESERVA
document.addEventListener('DOMContentLoaded', function() {
    const reservationForm = document.querySelector('form[name="contact-us"]');

    reservationForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(reservationForm);
        const jsonData = Object.fromEntries(formData.entries());

        fetch('/realizar-reserva', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(jsonData),
        })
        .then(response => response.json())
        .then(data => {
            if (data.message) {
                alert('Reserva realizada con éxito.');
                reservationForm.reset();
            } else {
                throw new Error('Error al realizar la reserva.');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Hubo un error al realizar la reserva.');
        });
    });
});

// Horas Disponibles
function actualizarSelectHoras(horasDisponibles) {
    var timepicker = document.getElementById('timepicker');
    timepicker.innerHTML = ''; // Limpiar opciones anteriores
    if (horasDisponibles.length === 0) {
        var option = document.createElement('option');
        option.value = '';
        option.textContent = 'No hay horas disponibles';
        timepicker.appendChild(option);
    } else {
        horasDisponibles.forEach(function(hora) {
            var option = document.createElement('option');
            option.value = hora; 
            option.textContent = hora; 
            timepicker.appendChild(option);
        });
    }
    var submitButton = document.getElementById('submit-button');
    submitButton.disabled = horasDisponibles.length === 0;
}

// Capacidad Mesa
function verificarCapacidadMesas(cantidadPersonas) {
    fetch(`/verificar-mesas-disponibles?cantidadPersonas=${cantidadPersonas}`)
        .then(response => response.json())
        .then(mesas => {
            console.log('Mesas disponibles:', mesas);
            // actualizarSelectMesas(mesas);
        })
        .catch(error => {
            console.error('Error al verificar la capacidad de las mesas:', error);
        });
}

// Función para obtener las capacidades de las mesas de la base de datos y actualizar el select
function obtenerCapacidadesMesas() {
    fetch('/obtener-capacidades-mesas')
        .then(response => response.json())
        .then(capacidades => {
            const selectCapacity = document.getElementById('selectCapacity');
            selectCapacity.innerHTML = '<option value="">Capacidad de personas</option>'; // Resetear y añadir placeholder
            capacidades.forEach(capacidad => {
                const option = document.createElement('option');
                option.value = capacidad;
                option.textContent = capacidad;
                selectCapacity.appendChild(option);
            });
        })
        .catch(error => {
            console.error('Error al obtener las capacidades de las mesas:', error);
        });
}

// Obtener Mesas Disponibles para reservas - REALIZAR RESERVA - CANCELAR RESERVA
document.addEventListener('DOMContentLoaded', function() {
    const selectTable = document.getElementById('tableNumber');
    // REALIZAR RESERVA CON ALERTA
    var form = document.querySelector('form[name="contact-us"]');
    form.addEventListener('submit', function(event) {
        event.preventDefault(); // Detiene el envío normal del formulario

        var formData = new FormData(form);
        var objectData = {};
        formData.forEach(function(value, key) {
            objectData[key] = value;
        });

        fetch('/realizar-reserva', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(objectData),
        })
        .then(response => response.json())
        .then(data => {
            // Muestra una alerta con el mensaje y el código de reserva
            alert(data.message + " Código de reserva: " + data.codigo);
            form.reset(); // Esto limpia el formulario después de la reserva
        })
        .catch((error) => {
            // Muestra una alerta de error
            alert("Error al realizar la reserva: " + error.message);
        });
    });
    // FIN REALIZAR RESERVA CON ALERTA
    // CANCELAR RESERVA CON ALERTA
    var cancelForm = document.querySelector('form[name="cancel-reservation"]');
    cancelForm.addEventListener('submit', function(event) {
        event.preventDefault(); // Previene el comportamiento por defecto del formulario

        var formData = new FormData(cancelForm);
        var objectData = {};
        formData.forEach(function(value, key) {
            objectData[key] = value;
        });

        fetch('/cancelar-reserva', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(objectData),
        })
        .then(response => response.json())
        .then(data => {
            alert(data.message); // Muestra una alerta con el mensaje de la respuesta
            cancelForm.reset(); 
        })
        .catch((error) => {
            alert("Error al cancelar la reserva: " + error.message);
        });
    });
    // FIN CANCELAR RESERVA CON ALERTA
    // Esta función obtiene las mesas disponibles y actualiza el select.
    function obtenerMesasDisponibles() {
        fetch('/obtener-mesas-disponibles')
            .then(response => response.json())
            .then(mesasDisponibles => {
                mesasDisponibles.forEach(numMesa => {
                    const option = document.createElement('option');
                    option.value = numMesa;
                    option.textContent = `Mesa ${numMesa}`;
                    selectTable.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error al obtener mesas:', error);
            });
    }

    // Llamar a la función al cargar la página.
    obtenerMesasDisponibles();
});


// Realizar Reserva con Alerta 
document.addEventListener('DOMContentLoaded', function() {
    var form = document.querySelector('form[name="contact-us"]');
    form.addEventListener('submit', function(event) {
        event.preventDefault(); // Prevenir el envío normal del formulario

        var formData = new FormData(this);
        fetch('/realizar-reserva', {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Problema con la respuesta del servidor');
            }
            return response.json();
        })
        .then(data => {
            if (data.error) {
                // mensaje de error
                alert('Error: ' + data.error);
            } else {
                // reserva exitosa
                alert('Reserva realizada con éxito. Código de reserva: ' + data.codigo);
            }
        })
        .catch(error => {
            // Manejar los errores de la red o problemas con la respuesta del servidor
            alert('Hubo un error al realizar la reserva: ' + error.message);
        });
    });

});


});